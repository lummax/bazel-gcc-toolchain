load("@bazel_tools//tools/cpp:unix_cc_toolchain_config.bzl", "cc_toolchain_config")
load("@@rules_cc//cc:defs.bzl", "cc_toolchain", "cc_toolchain_suite")

package(default_visibility = ["//visibility:public"])

cc_library(name = "empty_lib")

filegroup(
    name = "empty",
    srcs = [],
)

filegroup(
    name = "compiler_deps",
    srcs = glob(["**/*"]),
)

cc_toolchain(
    name = "cc_toolchain",
    all_files = ":compiler_deps",
    ar_files = ":compiler_deps",
    as_files = ":compiler_deps",
    compiler_files = ":compiler_deps",
    dwp_files = ":empty",
    linker_files = ":compiler_deps",
    module_map = None,
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_header_parsing = 1,
    supports_param_files = 1,
    toolchain_config = "gcc-__VARIANT__-config",
    toolchain_identifier = "gcc-__VARIANT__",
)

cc_toolchain_config(
    name = "gcc-__VARIANT__-config",
    abi_libc_version = "local",
    abi_version = "local",
    builtin_sysroot = "external/__REPOSITORY__/x86_64-buildroot-linux-gnu/sysroot",
    compile_flags = [],  # REPLACE
    compiler = "gcc",
    conly_flags = [],
    coverage_compile_flags = ["--coverage"],
    coverage_link_flags = ["--coverage"],
    cpu = "__ARCH__",
    cxx_builtin_include_directories = [
        "%package(@@__REPOSITORY__//)%/lib/gcc/x86_64-buildroot-linux-gnu/__VERSION__/include",
        "%package(@@__REPOSITORY__//)%/lib/gcc/x86_64-buildroot-linux-gnu/__VERSION__/include-fixed",
        "%package(@@__REPOSITORY__//)%/x86_64-buildroot-linux-gnu/include",
        "%package(@@__REPOSITORY__//)%/x86_64-buildroot-linux-gnu/sysroot/usr/include",
        "%package(@@__REPOSITORY__//)%/x86_64-buildroot-linux-gnu/include/c++/__VERSION__",
        "%package(@@__REPOSITORY__//)%/x86_64-buildroot-linux-gnu/include/c++/__VERSION__/x86_64-buildroot-linux-gnu",
        "%package(@@__REPOSITORY__//)%/x86_64-buildroot-linux-gnu/include/c++/__VERSION__/backward",
    ],
    cxx_flags = [],  # REPLACE
    dbg_compile_flags = [],  # REPLACE
    extra_flags_per_feature = {},
    host_system_name = "local",
    link_flags = [
        "-fuse-ld=gold",
        "-B/usr/bin",
        "-Wl,-no-as-needed",
        "-Wl,-z,relro,-z,now",
        "-pass-exit-codes",
    ],
    link_libs = [
        "-Wl,--push-state,-as-needed",
        "-lstdc++",
        "-Wl,--pop-state",
        "-Wl,--push-state,-as-needed",
        "-lm",
        "-Wl,--pop-state",
    ],
    opt_compile_flags = [],  # REPLACE
    opt_link_flags = ["-Wl,--gc-sections"],
    supports_start_end_lib = True,
    target_libc = "local",
    target_system_name = "x86_64-linux",
    tool_paths = {
        "ar": "bin/x86_64-linux-ar",
        "ld": "bin/x86_64-linux-ld",
        "llvm-cov": "None",
        "llvm-profdata": "None",
        "cpp": "wrapper.sh",
        "gcc": "wrapper.sh",
        "dwp": "bin/x86_64-linux-dwp",
        "gcov": "bin/x86_64-linux-gcov",
        "nm": "bin/x86_64-linux-nm",
        "objcopy": "bin/x86_64-linux-objcopy",
        "objdump": "bin/x86_64-linux-objdump",
        "strip": "bin/x86_64-linux-strip",
    },
    toolchain_identifier = "gcc-__VARIANT__",
    unfiltered_compile_flags = [
        "-fno-canonical-system-headers",
        "-no-canonical-prefixes",
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
)
